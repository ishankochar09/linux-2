// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ishankochar09/go_pro/gofrTutorial/internal/service (interfaces: Vehicle)

// Package service is a generated GoMock package.
package service

import (
	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
	models "github.com/ishankochar09/go_pro/gofrTutorial/internal/models"
	reflect "reflect"
)

// MockVehicle is a mock of Vehicle interface
type MockVehicle struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleMockRecorder
}

// MockVehicleMockRecorder is the mock recorder for MockVehicle
type MockVehicleMockRecorder struct {
	mock *MockVehicle
}

// NewMockVehicle creates a new mock instance
func NewMockVehicle(ctrl *gomock.Controller) *MockVehicle {
	mock := &MockVehicle{ctrl: ctrl}
	mock.recorder = &MockVehicleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVehicle) EXPECT() *MockVehicleMockRecorder {
	return m.recorder
}

// AllVehicles mocks base method
func (m *MockVehicle) AllVehicles(arg0 *gofr.Context) ([]models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllVehicles", arg0)
	ret0, _ := ret[0].([]models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllVehicles indicates an expected call of AllVehicles
func (mr *MockVehicleMockRecorder) AllVehicles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllVehicles", reflect.TypeOf((*MockVehicle)(nil).AllVehicles), arg0)
}

// Create mocks base method
func (m *MockVehicle) Create(arg0 *gofr.Context, arg1 *models.Vehicle) (models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockVehicleMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVehicle)(nil).Create), arg0, arg1)
}

// DeleteIDVehicle mocks base method
func (m *MockVehicle) DeleteIDVehicle(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIDVehicle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIDVehicle indicates an expected call of DeleteIDVehicle
func (mr *MockVehicleMockRecorder) DeleteIDVehicle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIDVehicle", reflect.TypeOf((*MockVehicle)(nil).DeleteIDVehicle), arg0, arg1)
}

// GetIDVehicle mocks base method
func (m *MockVehicle) GetIDVehicle(arg0 *gofr.Context, arg1 int) (models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDVehicle", arg0, arg1)
	ret0, _ := ret[0].(models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDVehicle indicates an expected call of GetIDVehicle
func (mr *MockVehicleMockRecorder) GetIDVehicle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDVehicle", reflect.TypeOf((*MockVehicle)(nil).GetIDVehicle), arg0, arg1)
}

// UpdateIDVehicle mocks base method
func (m *MockVehicle) UpdateIDVehicle(arg0 *gofr.Context, arg1 int, arg2 *models.Vehicle) (models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIDVehicle", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIDVehicle indicates an expected call of UpdateIDVehicle
func (mr *MockVehicleMockRecorder) UpdateIDVehicle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIDVehicle", reflect.TypeOf((*MockVehicle)(nil).UpdateIDVehicle), arg0, arg1, arg2)
}

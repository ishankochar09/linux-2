// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ishankochar09/go_pro/gofrTutorial/store (interfaces: VehicleStore)

// Package store is a generated GoMock package.
package store

import (
	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
	models "github.com/ishankochar09/go_pro/gofrTutorial/internal/models"
	reflect "reflect"
)

// MockVehicleStore is a mock of VehicleStore interface
type MockVehicleStore struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleStoreMockRecorder
}

// MockVehicleStoreMockRecorder is the mock recorder for MockVehicleStore
type MockVehicleStoreMockRecorder struct {
	mock *MockVehicleStore
}

// NewMockVehicleStore creates a new mock instance
func NewMockVehicleStore(ctrl *gomock.Controller) *MockVehicleStore {
	mock := &MockVehicleStore{ctrl: ctrl}
	mock.recorder = &MockVehicleStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVehicleStore) EXPECT() *MockVehicleStoreMockRecorder {
	return m.recorder
}

// DeleteVehicle mocks base method
func (m *MockVehicleStore) DeleteVehicle(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVehicle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVehicle indicates an expected call of DeleteVehicle
func (mr *MockVehicleStoreMockRecorder) DeleteVehicle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVehicle", reflect.TypeOf((*MockVehicleStore)(nil).DeleteVehicle), arg0, arg1)
}

// GetAll mocks base method
func (m *MockVehicleStore) GetAll(arg0 *gofr.Context) ([]models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockVehicleStoreMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockVehicleStore)(nil).GetAll), arg0)
}

// GetVehicleByID mocks base method
func (m *MockVehicleStore) GetVehicleByID(arg0 *gofr.Context, arg1 int) (models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleByID", arg0, arg1)
	ret0, _ := ret[0].(models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleByID indicates an expected call of GetVehicleByID
func (mr *MockVehicleStoreMockRecorder) GetVehicleByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleByID", reflect.TypeOf((*MockVehicleStore)(nil).GetVehicleByID), arg0, arg1)
}

// InsertVehicle mocks base method
func (m *MockVehicleStore) InsertVehicle(arg0 *gofr.Context, arg1 *models.Vehicle) (models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVehicle", arg0, arg1)
	ret0, _ := ret[0].(models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertVehicle indicates an expected call of InsertVehicle
func (mr *MockVehicleStoreMockRecorder) InsertVehicle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVehicle", reflect.TypeOf((*MockVehicleStore)(nil).InsertVehicle), arg0, arg1)
}

// UpdateVehByID mocks base method
func (m *MockVehicleStore) UpdateVehByID(arg0 *gofr.Context, arg1 int, arg2 *models.Vehicle) (models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVehByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVehByID indicates an expected call of UpdateVehByID
func (mr *MockVehicleStoreMockRecorder) UpdateVehByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVehByID", reflect.TypeOf((*MockVehicleStore)(nil).UpdateVehByID), arg0, arg1, arg2)
}
